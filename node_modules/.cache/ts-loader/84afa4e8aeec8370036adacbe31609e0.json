{"remainingRequest":"C:\\Users\\Igor Paranhos\\Projects\\doit-marvin\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Igor Paranhos\\Projects\\doit-marvin\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Igor Paranhos\\Projects\\doit-marvin\\node_modules\\ts-loader\\index.js??ref--13-3!C:\\Users\\Igor Paranhos\\Projects\\doit-marvin\\src\\store\\index.ts","dependencies":[{"path":"C:\\Users\\Igor Paranhos\\Projects\\doit-marvin\\src\\store\\index.ts","mtime":1570374016875},{"path":"C:\\Users\\Igor Paranhos\\Projects\\doit-marvin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Igor Paranhos\\Projects\\doit-marvin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Igor Paranhos\\Projects\\doit-marvin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Igor Paranhos\\Projects\\doit-marvin\\node_modules\\ts-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Igor Paranhos\\\\Projects\\\\doit-marvin\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"C:\\\\Users\\\\Igor Paranhos\\\\Projects\\\\doit-marvin\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport { getSentiment } from '@/api/algorithmia';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    todoItems: [{\n      id: 1,\n      checked: false,\n      description: 'Die!'\n    }],\n    notification: {\n      show: false,\n      message: '',\n      type: 'success'\n    }\n  },\n  mutations: {\n    addTodo: function addTodo(state, todoItem) {\n      state.todoItems.push(todoItem);\n    },\n    deleteTodo: function deleteTodo(state, itemId) {\n      state.todoItems = state.todoItems.filter(function (item) {\n        return item.id !== itemId;\n      });\n    },\n    showNotification: function showNotification(state, payload) {\n      state.notification = _objectSpread({}, payload, {\n        show: true\n      });\n    },\n    hideNotification: function hideNotification(state) {\n      state.notification.show = false;\n    }\n  },\n  actions: {\n    createTodo: function () {\n      var _createTodo = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(_ref, todoItem) {\n        var state, commit, sentiment, nextId;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                state = _ref.state, commit = _ref.commit;\n\n                if (!(todoItem.description.length <= 0)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                commit('showNotification', {\n                  type: 'danger',\n                  message: 'Type something!'\n                });\n                setTimeout(function () {\n                  commit('hideNotification');\n                }, 3000);\n                return _context.abrupt(\"return\");\n\n              case 5:\n                _context.next = 7;\n                return getSentiment(todoItem.description);\n\n              case 7:\n                sentiment = _context.sent;\n\n                if (!(sentiment >= 0)) {\n                  _context.next = 12;\n                  break;\n                }\n\n                commit('showNotification', {\n                  type: 'danger',\n                  message: 'You\\'re too positive!'\n                });\n                setTimeout(function () {\n                  commit('hideNotification');\n                }, 3000);\n                return _context.abrupt(\"return\");\n\n              case 12:\n                nextId = 1;\n\n                try {\n                  nextId = state.todoItems[state.todoItems.length - 1].id + 1;\n                } catch (e) {\n                  nextId = 1;\n                }\n\n                commit('hideNotification');\n                commit('addTodo', _objectSpread({}, todoItem, {\n                  id: nextId\n                }));\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function createTodo(_x, _x2) {\n        return _createTodo.apply(this, arguments);\n      }\n\n      return createTodo;\n    }(),\n    deleteTodo: function deleteTodo(_ref2, itemId) {\n      var state = _ref2.state,\n          commit = _ref2.commit;\n      commit('deleteTodo', itemId);\n    }\n  },\n  getters: {\n    getTodos: function getTodos(state) {\n      return state.todoItems;\n    }\n  }\n});",{"version":3,"sources":["C:\\Users\\Igor Paranhos\\Projects\\doit-marvin\\src\\store\\index.ts"],"names":[],"mappings":"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","sourcesContent":["import Vue from 'vue';\r\nimport Vuex from 'vuex';\r\nimport { getSentiment } from '@/api/algorithmia';\r\n\r\nVue.use(Vuex);\r\n\r\nexport default new Vuex.Store({\r\n  state: {\r\n    todoItems: [{\r\n      id: 1,\r\n      checked: false,\r\n      description: 'Die!',\r\n    }],\r\n    notification: {\r\n      show: false,\r\n      message: '',\r\n      type: 'success',\r\n    },\r\n  },\r\n  mutations: {\r\n    addTodo(state, todoItem: { id: number, checked: false, description: string }) {\r\n      state.todoItems.push(todoItem);\r\n    },\r\n    deleteTodo(state, itemId) {\r\n      state.todoItems = state.todoItems.filter((item) => item.id !== itemId);\r\n    },\r\n    showNotification(state, payload: { type: string, message: string }) {\r\n      state.notification = { ...payload, show: true };\r\n    },\r\n    hideNotification(state) {\r\n      state.notification.show = false;\r\n    },\r\n  },\r\n  actions: {\r\n    async createTodo({ state, commit }, todoItem) {\r\n\r\n      if (todoItem.description.length <= 0) {\r\n        commit('showNotification', {\r\n          type: 'danger',\r\n          message: 'Type something!',\r\n        });\r\n        setTimeout(() => { commit('hideNotification'); },\r\n          3000);\r\n\r\n        return;\r\n      }\r\n\r\n      const sentiment = await getSentiment(todoItem.description);\r\n\r\n      if (sentiment >= 0) {\r\n        commit('showNotification', {\r\n          type: 'danger',\r\n          message: 'You\\'re too positive!',\r\n        });\r\n        setTimeout(() => { commit('hideNotification'); },\r\n          3000);\r\n\r\n        return;\r\n      }\r\n\r\n      let nextId = 1;\r\n      try {\r\n        nextId = state.todoItems[state.todoItems.length - 1].id + 1;\r\n      } catch (e) {\r\n        nextId = 1;\r\n      }\r\n\r\n      commit('hideNotification');\r\n      commit('addTodo', { ...todoItem, id: nextId });\r\n    },\r\n    deleteTodo({ state, commit }, itemId) {\r\n      commit('deleteTodo', itemId);\r\n    },\r\n  },\r\n  getters: {\r\n    getTodos(state) {\r\n      return state.todoItems;\r\n    },\r\n  },\r\n});\r\n"],"sourceRoot":""}]}